# -*- coding: utf-8 -*-
"""Untitled25.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eNxh_4bla1_pILf2E75N86cUG-tRxbfv
"""

import imageio.v3 as imageio
import numpy as np
import matplotlib.pyplot as plt
from scipy import ndimage

def sobel_edge_detection(image):
    if len(image.shape) == 3:
        image = np.mean(image, axis=2)

    sobel_x = np.array([[-1, 0, 1],
                       [-2, 0, 2],
                       [-1, 0, 1]])

    sobel_y = np.array([[-1, -2, -1],
                       [0, 0, 0],
                       [1, 2, 1]])

    gradient_x = ndimage.convolve(image, sobel_x)
    gradient_y = ndimage.convolve(image, sobel_y)

    gradient_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)
    gradient_magnitude = (gradient_magnitude / gradient_magnitude.max() * 255).astype(np.uint8)

    return gradient_magnitude

def basic_threshold(edge_image, threshold_value):
    binary_image = (edge_image > threshold_value).astype(np.uint8) * 255
    return binary_image

def visualize_results(original, edges, segmented):
    plt.figure(figsize=(15, 5))

    plt.subplot(131)
    plt.imshow(original, cmap='gray')
    plt.title('Original Image')
    plt.axis('off')

    plt.subplot(132)
    plt.imshow(edges, cmap='gray')
    plt.title('Edge Detection')
    plt.axis('off')

    plt.subplot(133)
    plt.imshow(segmented, cmap='gray')
    plt.title('Segmented Image')
    plt.axis('off')

    plt.tight_layout()
    plt.show()

def segment_image(image_path, threshold_value=128):
    image = imageio.imread(image_path)
    edge_image = sobel_edge_detection(image)
    segmented_image = basic_threshold(edge_image, threshold_value)
    visualize_results(image, edge_image, segmented_image)
    return edge_image, segmented_image

segment_image('/content/image.jpg', threshold_value=128)